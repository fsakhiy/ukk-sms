// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TestTable {
  id      Int    @unique @default(autoincrement())
  uuid    String @default(uuid())
  name    String
  payload String
}

model DummyTable {
  id     Int    @unique @default(autoincrement())
  uuid   String @default(uuid())
  first  String
  second String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

model AuditLog {
  id         Int    @unique @default(autoincrement())
  uuid       String @default(uuid())
  actionType ACTION
  tableName  String
  dataId     Int

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id   Int    @unique @default(autoincrement())
  uuid String @default(uuid())

  name String

  teacher Teacher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDeleted     Boolean         @default(false)
  ClassesDetail ClassesDetail[]
}

model Classroom {
  id   Int    @unique @default(autoincrement())
  uuid String @default(uuid())

  name     String
  Students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDeleted    Boolean        @default(false)
  MainSchedule MainSchedule[]
}

model Student {
  id                   Int     @unique @default(autoincrement())
  uuid                 String  @default(uuid())
  name                 String
  schoolNumber         String?
  nationalSchoolNumber String?

  // classNumber Int
  user User?

  classroomId Int
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDeleted Boolean @default(false)

  StudentSchedule StudentSchedule[]
}

model Teacher {
  id                    Int     @unique @default(autoincrement())
  uuid                  String  @default(uuid())
  name                  String
  teacherNumber         String?
  nationalTeacherNumber String?
  user                  User?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDeleted Boolean @default(false)
  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int
}

enum UserAccountType {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id        Int      @unique @default(autoincrement())
  uuid      String   @default(uuid())
  username  String   @unique
  password  String
  role      String
  studentId Int?     @unique
  student   Student? @relation(fields: [studentId], references: [id])

  teacherId Int?     @unique
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountType UserAccountType
  isAdmin     Boolean?        @default(false)
  AuditLog    AuditLog[]
}

model StudentSchedule {
  id   Int    @unique @default(autoincrement())
  uuid String @unique @default(uuid())

  studentId Int
  student   Student @relation(fields: [studentId], references: [id])

  classesId Int
  classes   Classes @relation(fields: [classesId], references: [id])

  status       String
  absentLetter String?
  isAbsent     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MainSchedule {
  id   Int    @unique @default(autoincrement())
  uuid String @default(uuid())
  name String

  classroomId Int
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDeleted     Boolean         @default(false)
  ClassesDetail ClassesDetail[]
}

model ClassesDetail {
  id   Int    @unique @default(autoincrement())
  uuid String @unique @default(uuid())

  mainScheduleId Int
  mainSchedule   MainSchedule @relation(fields: [mainScheduleId], references: [id], onDelete: Cascade)

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  scheduleOrderId Int
  scheduleOrder   ScheduleOrderMasterOption @relation(fields: [scheduleOrderId], references: [id])
  Classes         Classes[]
}

model Classes {
  id   Int    @unique @default(autoincrement())
  uuid String @default(uuid())

  // tanggal kapan efektif
  effectiveDate DateTime

  // classCode adalah kode yang digunakan agar murid dapat melakukan absensi
  classCode String

  classesDetailId Int
  classesDetail   ClassesDetail @relation(fields: [classesDetailId], references: [id], onDelete: Cascade)

  StudentSchedule StudentSchedule[]
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model ScheduleOrderMasterOption {
  id   Int    @unique @default(autoincrement())
  uuid String @unique @default(uuid())

  name String

  day Day

  startTime DateTime
  endTime   DateTime

  ClassesDetail ClassesDetail[]
}
