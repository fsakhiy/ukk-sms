// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Schedule {
//   id      Int       @unique @default(autoincrement())
//   uuid    String    @default(uuid())
//   name    String
//   classes Classes[]
// }
//
// model Subject {
//   id      Int       @unique @default(autoincrement())
//   uuid    String    @default(uuid())
//   name    String
//   Classes Classes[]
// }
//
// model Classes {
//   id         Int      @unique @default(autoincrement())
//   uuid       String   @default(uuid())
//   scheduleId Int
//   schedule   Schedule @relation(fields: [scheduleId], references: [id])
//   subjectId  Int
//   subject    Subject  @relation(fields: [subjectId], references: [id])
//   start_time DateTime
//   end_time   DateTime
//   teacherId  Int
//   teacher    User     @relation(fields: [teacherId], references: [id])
// }
//
// model User {
//   id      Int       @unique @default(autoincrement())
//   uuid    String    @default(uuid())
//   roleId  Int
//   role    Role      @relation(fields: [roleId], references: [id])
//   Classes Classes[]
// }
//
// model Role {
//   id   Int    @unique @default(autoincrement())
//   uuid String @default(uuid())
//   User User[]
// }

model TestTable {
  id      Int    @unique @default(autoincrement())
  uuid    String @default(uuid())
  name    String
  payload String
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

model AuditLog {
  id         Int      @unique @default(autoincrement())
  uuid       String   @default(uuid())
  actionType ACTION
  tableName  String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MainSchedule {
  id          Int       @unique @default(autoincrement())
  uuid        String    @default(uuid())
  name        String
  startPeriod DateTime
  endPeriod   DateTime
  class       Classes[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
}

model Subject {
  id        Int       @unique @default(autoincrement())
  uuid      String    @default(uuid())
  name      String
  teacherId Int
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  class     Classes[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Classes {
  id             Int          @unique @default(autoincrement())
  uuid           String       @default(uuid())
  mainScheduleId Int
  MainSchedule   MainSchedule @relation(fields: [mainScheduleId], references: [id])

  startTime DateTime
  endTime   DateTime

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int
  isDeleted Boolean @default(false)
}

model Classroom {
  id        Int      @unique @default(autoincrement())
  uuid      String   @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Students Student[]

  isDeleted Boolean @default(false)
}

model Student {
  id                   Int     @unique @default(autoincrement())
  uuid                 String  @default(uuid())
  name                 String
  schoolNumber         String?
  nationalSchoolNumber String?
  classNumber          Int
  user                 User?

  classroomId Int
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  isDeleted Boolean @default(false)
}

model Teacher {
  id                    Int       @unique @default(autoincrement())
  uuid                  String    @default(uuid())
  name                  String
  teacherNumber         String?
  nationalTeacherNumber String?
  user                  User?
  Subject               Subject[]
}

model User {
  id        Int        @unique @default(autoincrement())
  uuid      String
  username  String
  password  String
  role      String
  studentId Int?       @unique
  student   Student?   @relation(fields: [studentId], references: [id])
  teacherId Int?       @unique
  teacher   Teacher?   @relation(fields: [teacherId], references: [id])
  isAdmin   Boolean?   @default(false)
  AuditLog  AuditLog[]
}
